#!/bin/bash
clear
set -euo pipefail

# Check for -nuke flag and purge minikube and docker artifacts if requested
if [[ "${1:-}" == "-nuke" ]]; then
  echo "==> Nuke flag detected! Deleting EVERYTHING: minikube, docker artifacts..."
  minikube delete
  rm -rf ~/.minikube

  containers=$(docker ps -a -q)
  if [ -n "$containers" ]; then
    docker stop $containers
    docker rm $containers
  fi

  docker system prune -a --force

  echo "==> Restarting minikube ..."
  minikube start --network-plugin=cni --cni=calico
  minikube status
fi

# Helm and namespace related steps
echo "==> Uninstalling existing Helm release (if any)..."
helm uninstall iot-system -n iot-system || true

echo "==> Deleting namespace 'iot-system'..."
kubectl delete namespace iot-system --ignore-not-found

echo "==> Recreating namespace 'iot-system'..."
kubectl create namespace iot-system

echo "==> Setting current context to 'iot-system'..."
kubectl config set-context --current --namespace=iot-system

echo "==> Creating 'db-credentials' secret..."
kubectl create secret generic db-credentials \
  --namespace=iot-system \
  --from-literal=POSTGRES_DB=iotdb \
  --from-literal=POSTGRES_USER=iotuser \
  --from-literal=POSTGRES_PASSWORD=iotpass \
  --dry-run=client -o yaml | kubectl apply -f -

echo "==> Deploying Helm chart 'iot-system'..."
helm upgrade --install iot-system ./charts/iot-system -n iot-system --create-namespace

echo "==> Waiting for TimescaleDB pod to be ready..."
kubectl wait --for=condition=ready pod -l app=timescaledb -n iot-system --timeout=360s

TIMESCALE_POD=$(kubectl get pod -l app=timescaledb -n iot-system -o jsonpath='{.items[0].metadata.name}')
echo "==> Initializing TimescaleDB schema on pod: $TIMESCALE_POD"

echo "==> Waiting for TimescaleDB to accept connections..."
until kubectl exec -it "$TIMESCALE_POD" -n iot-system -- psql -U iotuser -d iotdb -c "SELECT 1;" >/dev/null 2>&1; do
  echo "TimescaleDB not ready for connections, waiting 5 seconds..."
  sleep 5
done

echo "==> Creating sensor_data table..."
kubectl exec -it "$TIMESCALE_POD" -n iot-system -- psql -U iotuser -d iotdb -c "
CREATE EXTENSION IF NOT EXISTS timescaledb;
CREATE TABLE IF NOT EXISTS sensor_data (
  time TIMESTAMPTZ NOT NULL,
  device_id TEXT NOT NULL,
  temperature DOUBLE PRECISION,
  humidity DOUBLE PRECISION,
  pressure DOUBLE PRECISION,
  motion TEXT,
  switch TEXT
);
SELECT create_hypertable('sensor_data', 'time', if_not_exists => TRUE);
CREATE INDEX IF NOT EXISTS idx_sensor_device_id ON sensor_data (device_id, time DESC);
"

echo "==> Reset complete. Verify all pods in 10 seconds..."
sleep 10
kubectl get pods -n iot-system

echo "==> Running test queries from database in 10 seconds..."
sleep 10
kubectl exec -it "$TIMESCALE_POD" -n iot-system -- psql -U iotuser -d iotdb -c "SELECT COUNT(*) FROM sensor_data;"
kubectl exec -it "$TIMESCALE_POD" -n iot-system -- psql -U iotuser -d iotdb -c "SELECT * FROM sensor_data ORDER BY time DESC LIMIT 5;"

MINIKUBE_IP=$(minikube ip)
WEB_FRONTEND_NODEPORT=$(kubectl get service web-frontend -n iot-system -o jsonpath='{.spec.ports[0].nodePort}')
WEB_BACKEND_NODEPORT=$(kubectl get service web-backend -n iot-system -o jsonpath='{.spec.ports[0].nodePort}')
echo "==> Generating SSH -L command for port forwarding from local machine..."
SSH_CMD="ssh -L 30145:${MINIKUBE_IP}:${WEB_BACKEND_NODEPORT} -L 8080:${MINIKUBE_IP}:${WEB_FRONTEND_NODEPORT} ${USER}@$(hostname)"
echo "$SSH_CMD"
