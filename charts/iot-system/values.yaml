# Global configurations
namespace: iot-system

# Certificate configurations
certificates:
  mosquitto:
    enabled: true
    secretName: mosquitto-certs

# Service account configuration
serviceAccount:
  name: iot-service-account
  create: true

# MQTT broker (Mosquitto) configuration
mosquitto:
  image:
    repository: eclipse-mosquitto
    tag: latest
    pullPolicy: IfNotPresent
  ports:
    - name: mqtt
      port: 1883
    - name: mqtts
      port: 8883
  config:
    allowAnonymous: false
    useTLS: true
  credentials:
    iotServicePassword: ""  # Leave empty for auto-generation 
    testPubPassword: ""     # Leave empty for auto-generation
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  resources:
    limits:
      memory: "256Mi"
      cpu: "200m"

# IoT Service configuration
iotService:
  image:
    repository: nathandiez12/iot-service
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 1
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  resources:
    limits:
      memory: "256Mi"
      cpu: "200m"
  port: 5000
  # Metrics configuration
  metrics:
    enabled: true
    port: 8000

# Test publisher configuration
testPub:
  image:
    repository: nathandiez12/test-pub
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 1
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  resources:
    limits:
      memory: "128Mi"
      cpu: "100m"

# TimescaleDB configuration
timescaledb:
  image:
    repository: timescale/timescaledb
    tag: latest-pg14
    pullPolicy: IfNotPresent
  securityContext:
    runAsUser: 70
    runAsNonRoot: true
  persistence:
    enabled: false
    size: 1Gi
  resources:
    limits:
      memory: "512Mi"
      cpu: "500m"
  port: 5432
  database:
    name: iotdb
    user: iotuser
    # Remove hardcoded password
    existingSecret: db-credentials

# Web Backend configuration
webBackend:
  image:
    repository: nathandiez12/web-backend
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 1
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  resources:
    limits:
      memory: "256Mi"
      cpu: "200m"
  port: 5000
  service:
    type: NodePort

# Web Frontend configuration
webFrontend:
  image:
    repository: nathandiez12/web-frontend
    tag: latest
    pullPolicy: IfNotPresent
  replicas: 1
  securityContext:
    runAsUser: 1000
    runAsNonRoot: true
  resources:
    limits:
      memory: "256Mi"
      cpu: "200m"
  port: 3000
  service:
    type: NodePort
    port: 3000

# Network policy settings
networkPolicy:
  enabled: true

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"

# Monitoring-specific configurations
monitoring:
  ingress:
    enabled: true
    className: nginx
    annotations: {}
    prometheus:
      host: prometheus.iot-dashboard.local
    grafana:
      host: grafana.iot-dashboard.local

# Prometheus configuration
prometheus:
  enabled: true  # Added this line
  server:
    service:
      type: NodePort
    persistentVolume:
      enabled: true
      size: 10Gi
    config:
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
        - job_name: 'iot-service'
          kubernetes_sd_configs:
            - role: service
              namespaces:
                names:
                  - iot-system
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_label_prometheus]
              regex: "true"
              action: keep
            - source_labels: [__meta_kubernetes_service_port_name]
              regex: "metrics"
              action: keep

# Grafana configuration
grafana:
  enabled: true  # Added this line
  service:
    type: NodePort
  persistence:
    enabled: true
    size: 5Gi
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server.iot-system.svc.cluster.local
        access: proxy
        isDefault: true
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
  # Reference to external dashboard configuration file
  dashboardFile: files/grafana-dashboard.json
  ingress:
    enabled: true
    hosts:
      - grafana.iot-dashboard.local